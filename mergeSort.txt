/*Assume we have two input and two output tapes to perform the 
sorting. The internal memory can hold and sort m records at a time. 
Write a program in java for external sorting. Find out time 
complexity.*/

import java.util.Arrays;
class Main {
     void divide(int[] a,int n)
    {
        if(n<2)
            return;
        int mid=n/2;
        int[] l=new int[mid];
        int[] r=new int[n-mid];
        for(int i=0;i<mid;i++)
        {
            l[i]=a[i];
        }
        for(int i=mid;i<n;i++)
        {
            r[i-mid]=a[i];
        }
        divide(l,mid);
        divide(r,n-mid);
        merge(a,l,r,mid,n-mid);
        
    }
     void merge(int[] a,int[] l,int[] r,int left,int right)
    {
        int i=0,j=0,k=0;
        while(i<left && j<right)
        {
            if(l[i]<=r[j])
            {
                a[k]=l[i];
                k++;
                i++;
            }
            else
            {
                a[k]=r[j];
                k++;
                j++;
            }
        }
        while(i<left)
        {
            a[k]=l[i];
            k++;
            i++;
        }
        while(j<right)
        {
            a[k]=r[j];
            k++;
            j++;
        }
    }
    public static void main(String[] args) {
        int[] array={3,4,2,6,7,1};
        Main ob=new Main();
        int n=array.length;
        int low=0;
        int high=n;
        ob.divide(array,n);
        System.out.println(Arrays.toString(array));
        // for(int i=0;i<n;i++)
        // {
        //     System.out.println(array[i]);
        // }
    }
}

//Modified Code which runs dyanamically
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.Arrays;
import java.util.Scanner;
class Main {
     void divide(int[] a,int lw,int n)
    {
        if(n<2)
            return;
        int mid=n/2;
        int[] l=new int[mid];
        int[] r=new int[n-mid];
        for(int i=0;i<mid;i++)
        {
            l[i]=a[i];
        }
        for(int i=mid;i<n;i++)
        {
            r[i-mid]=a[i];
        }
        divide(l,lw,mid);
        divide(r,mid+1,n-mid);
        merge(a,l,r,mid,n-mid);
        
    }
     void merge(int[] a,int[] l,int[] r,int left,int right)
    {
        int i=0,j=0,k=0;
        while(i<left && j<right)
        {
            if(l[i]<=r[j])
            {
                a[k]=l[i];
                k++;
                i++;
            }
            else
            {
                a[k]=r[j];
                k++;
                j++;
            }
        }
        while(i<left)
        {
            a[k]=l[i];
            k++;
            i++;
        }
        while(j<right)
        {
            a[k]=r[j];
            k++;
            j++;
        }
    }
    public static void main(String[] args) {
        // int[] array={3,4,2,6,7,1};
        Scanner sc=new Scanner(System.in);
        int as;
        System.out.println("Enter Array Size ");
        as=sc.nextInt();
        int[] a=new int[as] ;
        for(int i=0;i<as;i++)
         {
             System.out.print("Enter Element:");
             a[i]=sc.nextInt();
         }

        Main ob=new Main();
        int low=0;
        int high=as;
        ob.divide(a,low,high);
        // System.out.println(Arrays.toString(a));
         for(int i=0;i<as;i++)
         {
             System.out.println(a[i]);
        }
    }
}